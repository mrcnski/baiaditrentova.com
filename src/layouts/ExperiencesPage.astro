---
import fs from 'fs';
import yaml from 'js-yaml';

interface Experience {
    title: Record<string, string>;
    text: Record<string, string>;
    media?: string;
}
interface ExperiencesPage {
    experiences: Experience[];
}

let experiencesPage: ExperiencesPage | undefined = undefined;
try {
    experiencesPage = yaml.load(fs.readFileSync('oreste/experiences.yaml', 'utf8')) as ExperiencesPage;
} catch (e) {
    console.log(e);
    throw e;
}

import Layout from "@layouts/Layout.astro";

import FadeIn from "@components/FadeIn.astro";
import FormatText from "@components/FormatText.astro";
import PageSection from "@components/PageSection.astro";

import { getLangFromUrl, useTranslations, useDataTranslations } from '@i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const { d } = useDataTranslations(lang);
---

<Layout title={t("experiences.title")} description={t("experiences.description")}>
    <div class="top-spacer"></div>

    <PageSection>
        <FadeIn>
            <h2>{t("experiences.title")}</h2>
        </FadeIn>
    </PageSection>

    {experiencesPage.experiences.map((experience, index) => (
        <PageSection>
            <FadeIn>
                <div class="columns-experiences" data-reverse={(index % 2 == 0) ? "yes" : "no"} >
                    <div class="column-details">
                        <h3><FormatText text={d(experience.title)!} /></h3>

                        <p class="small-text"><FormatText text={d(experience.text)!} /></p>
                    </div>

                    <div class="column-images">
                        {experience.media && <Fragment set:html={experience.media} />}
                    </div>
                </div>
            </FadeIn>
        </PageSection>
    ))}
</Layout>

<style lang="less">
    :global(li) {
        font-size: 1.3rem;
        text-align: left;

        @media (max-width: 768px) {
            font-size: 1.1rem;
        }
    }
    :global(summary) {
        font-size: 1.2rem;
        font-weight: 300;
        color: var(--blue);

        transition: scale 0.6s cubic-bezier(0.22, 1, 0.36, 1);

        cursor: pointer;

        &:hover {
            scale: 1.1;
        }
    }
    :global(details) {
        width: 100%;
        box-sizing: border-box;

        margin-top: 0.5em;
    }
    :global(details p) {
        font-size: 1.2rem;
    }

    .columns-experiences {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;

        &[data-reverse="yes"] {
            flex-direction: row-reverse;
        }

        @media (max-width: 700px) {
            flex-direction: column !important;
            row-gap: 3rem;
        }

        h3 {
            max-width: 75%;
            margin: auto;
            margin-bottom: 1rem;
        }
    }
    .column-images {
        flex: 0.55;

        width: 100%;

        display: flex;
        justify-content: center;
    }
    .column-details {
        flex: 0.45;

        text-align: center;
        max-width: 80%;
    }
</style>

<script>
    // From https://css-tricks.com/how-to-animate-the-details-element/.
    class Accordion {
        constructor(el) {
            // Store the <details> element
            this.el = el;
            // Store the <summary> element
            this.summary = el.querySelector('summary');
            // Store the <div class="content"> element
            this.content = el.querySelector('.content');

            // Store the animation object (so we can cancel it if needed)
            this.animation = null;
            // Store if the element is closing
            this.isClosing = false;
            // Store if the element is expanding
            this.isExpanding = false;
            // Detect user clicks on the summary element
            this.summary.addEventListener('click', (e) => this.onClick(e));
        }

        onClick(e) {
            // Stop default behaviour from the browser
            e.preventDefault();
            // Add an overflow on the <details> to avoid content overflowing
            this.el.style.overflow = 'hidden';

            // Check if the element is being closed or is already closed
            if (this.isClosing || !this.el.open) {
                this.open();
            // Check if the element is being opened or is already open
            } else if (this.isExpanding || this.el.open) {
                this.shrink();
            }
        }

        shrink() {
            this.isClosing = true;

            // Store the current height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the height of the summary
            const endHeight = `${this.summary.offsetHeight}px`;

            // If there is already an animation running
            if (this.animation) {
                this.animation.cancel();
            }

            // Start a WAAPI animation
            this.animation = this.el.animate({
                // Set the keyframes from the startHeight to endHeight
                height: [startHeight, endHeight]
            }, {
                duration: 400,
                easing: 'ease-out'
            });

            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(false);
            // If the animation is cancelled, isClosing variable is set to false
            this.animation.oncancel = () => this.isClosing = false;
        }

        open() {
            // Apply a fixed height on the element
            this.el.style.height = `${this.el.offsetHeight}px`;
            // Force the [open] attribute on the details element
            this.el.open = true;
            // Wait for the next frame to call the expand function
            window.requestAnimationFrame(() => this.expand());
        }

        expand() {
            this.isExpanding = true;
            // Get the current fixed height of the element
            const startHeight = `${this.el.offsetHeight}px`;
            // Calculate the open height of the element (summary height + content height)
            const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;

            // If there is already an animation running
            if (this.animation) {
                this.animation.cancel();
            }

            // Start a WAAPI animation
            this.animation = this.el.animate({
                // Set the keyframes from the startHeight to endHeight
                height: [startHeight, endHeight]
            }, {
                duration: 400,
                easing: 'ease-out'
            });
            // When the animation is complete, call onAnimationFinish()
            this.animation.onfinish = () => this.onAnimationFinish(true);
            // If the animation is cancelled, isExpanding variable is set to false
            this.animation.oncancel = () => this.isExpanding = false;
        }

        onAnimationFinish(open) {
            // Set the open attribute based on the parameter
            this.el.open = open;
            // Clear the stored animation
            this.animation = null;
            // Reset isClosing & isExpanding
            this.isClosing = false;
            this.isExpanding = false;
            // Remove the overflow hidden and the fixed height
            this.el.style.height = this.el.style.overflow = '';
        }
    }

    document.querySelectorAll('details').forEach((el) => {
        new Accordion(el);
    });
</script>
