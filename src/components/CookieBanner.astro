---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="banner" class="banner">
    <div class="cookie-content">
        <h3>{t('cookie.title')}</h3>
        <p>{t('cookie.description')}</p>
        <div class="cookie-buttons">
            <button id="accept-cookies">{t('cookie.accept')}</button>
            <button id="deny-cookies">{t('cookie.deny')}</button>
        </div>
    </div>
</div>

<style>
    .banner {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 1000;

        background: var(--white-bg);
        padding: 1rem;
        padding-bottom: 2rem;
        filter: drop-shadow(0px -4px 5px rgba(0, 0, 0, .2));

        display: none;
    }

    .banner.visible {
        display: block;
    }

    .cookie-content {
        margin: 0 auto;
        text-align: center;

        p {
            margin: auto;
        }

        .cookie-buttons {
            margin-top: 1rem;
            display: flex;
            gap: 1rem;
            justify-content: center;
        }

        button {
            margin-top: 0.5rem;
            padding: 0.5rem 2rem;
            border: none;
            border-radius: 4px;

            cursor: pointer;
            font-weight: bold;
            transition: opacity 0.6s cubic-bezier(0.22, 1, 0.36, 1);
        }

        button:hover {
            opacity: 0.5;
        }

        #accept-cookies {
            background-color: var(--orange);
            color: var(--white-bg);
        }

        #deny-cookies {
            background-color: var(--brown-dk);
            color: var(--white-bg);
        }
    }
</style>

<script is:inline>
    // Initialize gtag.

    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }

    // Implement cookie banner.

    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
        return null;
    }

    function setConsent(consent) {
        const consentMode = {
            'functionality_storage': consent.necessary ? 'granted' : 'denied',
            'security_storage': consent.necessary ? 'granted' : 'denied',
            'ad_storage': consent.marketing ? 'granted' : 'denied',
            'analytics_storage': consent.analytics ? 'granted' : 'denied',
            'personalization_storage': consent.preferences ? 'granted' : 'denied',
        };
        gtag('consent', 'update', consentMode);
        localStorage.setItem('consentMode', JSON.stringify(consentMode));
    }

    function handleCookieConsent() {
        const banner = document.getElementById('banner');
        const consentCookie = getCookie('cookie-consent');

        function hideBanner() {
            banner?.classList.remove('visible');
        }
        function showBanner() {
            banner?.classList.add('visible');
        }

        // TODO: Also show banner if consentCookie not found?
        if (!consentCookie) {
            showBanner();
        }

        document.getElementById('accept-cookies')?.addEventListener('click', () => {
            setCookie('cookie-consent', 'accepted', 365);
            hideBanner();

            // Update consent mode.
            setConsent({
                necessary: true,
                analytics: true,
            });
        });

        document.getElementById('deny-cookies')?.addEventListener('click', () => {
            setCookie('cookie-consent', 'denied', 365);
            hideBanner();

            // Update consent mode.
            setConsent({
                necessary: false,
                analytics: false,
            });
        });
    }

    // Run when the DOM is loaded
    document.addEventListener('DOMContentLoaded', handleCookieConsent);
</script>
