---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="cookie-banner" class="cookie-banner">
    <div class="cookie-content">
        <h3>{t('cookie.title')}</h3>
        <p>{t('cookie.description')}</p>
        <div class="cookie-buttons">
            <button id="accept-cookies">{t('cookie.accept')}</button>
            <button id="deny-cookies">{t('cookie.deny')}</button>
        </div>
    </div>
</div>

<style>
    .cookie-banner {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: var(--white);
        padding: 1rem;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: none;
    }

    .cookie-banner.visible {
        display: block;
    }

    .cookie-content {
        max-width: 1200px;
        margin: 0 auto;
        text-align: center;
    }

    .cookie-buttons {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
        justify-content: center;
    }

    button {
        padding: 0.5rem 2rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s;
    }

    #accept-cookies {
        background: var(--orange);
        color: white;
    }

    #accept-cookies:hover {
        background: var(--dark-orange);
    }

    #deny-cookies {
        background: var(--light-gray);
        color: var(--dark-gray);
    }

    #deny-cookies:hover {
        background: var(--gray);
    }
</style>

<script>
    function setCookie(name: string, value: string, days: number) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
    }

    function getCookie(name: string): string | null {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
        return null;
    }

    function handleCookieConsent() {
        const banner = document.getElementById('cookie-banner');
        const consent = getCookie('cookie-consent');

        if (!consent) {
            banner?.classList.add('visible');
        }

        document.getElementById('accept-cookies')?.addEventListener('click', () => {
            setCookie('cookie-consent', 'accepted', 365);
            banner?.classList.remove('visible');
            // Enable Google Analytics
            window.dataLayer = window.dataLayer || [];
            window.dataLayer.push({'gtm.start': new Date().getTime(), event:'gtm.js'});
        });

        document.getElementById('deny-cookies')?.addEventListener('click', () => {
            setCookie('cookie-consent', 'denied', 365);
            banner?.classList.remove('visible');
        });
    }

    // Run when the DOM is loaded
    document.addEventListener('DOMContentLoaded', handleCookieConsent);
</script>
