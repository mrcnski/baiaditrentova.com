---
/// Based on https://wp-tutorials.tech/refine-wordpress/parallax-image-scrolling-effect/.

interface Props {
    relativeSrc: string;
    heading?: string;
    headingId?: string;
    description?: string;
    height?: string;
    id?: string;
}

import ParallaxFadeIn from "@components/ParallaxFadeIn.astro";
import RelativeSrcImage from "@components/RelativeSrcImage.astro";

import { getLangFromUrl, useTranslations } from '@i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

let { relativeSrc, heading, headingId, description, height = "100vh", id } = Astro.props;

// Make sure the ID doesn't start with a number.
if (!id) {
    while (!id || /^\d/.test(id)) {
        id = Math.random().toString(36).slice(2, 11)
    }
}
---

<parallax-image>
    <div class="parallax-img-container" style={`height: ${height};`}>
        <RelativeSrcImage id={id} classes={`parallax-img ${(description) && "parallax-img-filter"}`} relativeSrc={relativeSrc} alt={heading || t("site.name")} />

        <ParallaxFadeIn>
            {(heading) && <h1 id={headingId} class="parallax-heading">{heading}</h1>}
            {(description) && <p class="parallax-description">{description}</p>}
        </ParallaxFadeIn>
    </div>
</parallax-image>

<style lang="less">
    .parallax-img-container {
        position: relative;
    }

    :global(.parallax-img) {
        height: 100%;
        width: 100vw;
        object-fit: cover;
    }
    :global(.parallax-img-filter) {
        filter: brightness(80%) saturate(120%);
    }

    .parallax-heading {
        position: absolute;
        top: 25%;
        left: 10%;
        max-width: 80%;

        margin: 0;

        font-weight: bold;
        color: var(--white-bg);
        filter: drop-shadow(2px 9px 2px rgba(0, 0, 0, .25));
    }

    .parallax-description {
        position: absolute;
        top: 45%;
        left: 10%;
        width: 60ch;
        max-width: 80%;

        margin: 0;

        color: var(--white-bg);
        font-size: 1.5rem;
        font-weight: 400;

        filter: drop-shadow(1px 5px 2px rgba(0, 0, 0, .50));

        @media (max-width: 700px) {
            font-size: 1.25rem;
        }
    }
</style>

<script>
    class ParallaxImage extends HTMLElement {
        connectedCallback() {
            // Given an image, find out whether it's near the top or the
            // bottom of the window and set the image's object-position
            // CSS property accordingly.
            function setImageScrollPercentage(rect: DOMRect) {
                const imageHeight = rect.width / imageAspectRatio;

                var viewableRegion = window.innerHeight - rect.height;
                if (imageHeight > viewableRegion) {
                    viewableRegion = imageHeight - rect.height;
                }

                //const objectVerticalOffset = Math.round(1000 * rect.top / viewableRegion) / 10.0;
                //const objectVerticalOffset = 100 * rect.top / viewableRegion;
                //this.style.objectPosition = `0 ${50+objectVerticalOffset}%`;
            }

            let image = this.children[0] as HTMLImageElement;
            const imageAspectRatio = image.naturalWidth / image.naturalHeight;

            let lastImageRect = this.getBoundingClientRect();
            let ticking = false;

            setImageScrollPercentage(lastImageRect);

            // Listen for window-resize and document-scroll events.
            window.addEventListener('resize', function() {
                setImageScrollPercentage(image.getBoundingClientRect());
            });
            document.addEventListener('scroll', function() {
                let lastImageRect = image.getBoundingClientRect();

                if (!ticking) {
                    window.requestAnimationFrame(() => {
                      setImageScrollPercentage(lastImageRect);
                      ticking = false;
                    });

                    ticking = true;
               }
           });
        }
    }

    customElements.define('parallax-image', ParallaxImage);
</script>
