---
interface Props {
    classList?: string[];
    threshold?: number;
}

const { classList = [], threshold } = Astro.props;

---

<fade-in class:list={["fade-in", ...classList]} data-message={threshold}>
    <slot />
</fade-in>

<style lang="less">
    .fade-in {
        opacity: 0;
        visibility: hidden;
        transform: translateY(5vh);
        transition: opacity 1.2s ease-in, transform 1.2s ease-in;
    }
    .fade-in.is-visible {
        opacity: 1;
        visibility: visible;
        transform: none;
    }
</style>

<script>
    class FadeIn extends HTMLElement {
        connectedCallback() {
            const callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
                entries.forEach((entry: IntersectionObserverEntry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        observer.unobserve(entry.target);
                    }
                });
            };
            const options: IntersectionObserverInit = {
                root: null,
                rootMargin: "0px",
                threshold: Number(this.dataset.threshold) || 0.20,
            };

            const observer = new IntersectionObserver(callback, options);
            observer.observe(this);
        }
    }

    customElements.define('fade-in', FadeIn);
</script>
